pragma experimental "v0.5.0";
pragma experimental ABIEncoderV2;
pragma solidity ^0.4.22;

import {MemOps} from "./MemOps.slb";
import {EVMStorage} from "./EVMStorage.slb";
import {EVMUtils} from "./EVMUtils.slb";

library EVMAccounts {

    using EVMStorage for EVMStorage.Storage;

    struct Account {
        address addr;
        uint balance;
        uint8 nonce;
        bool destroyed;
        bytes code;
        EVMStorage.Storage stge;
    }

    struct Element {
        uint _next;
        Account account;
    }

    struct Accounts {
        Element head;
        uint size;
    }

    function get(Accounts memory self, address addr) internal pure returns (Account memory acc){
        if (self.size == 0) {
            Element memory e;
            e.account.addr = addr;
            self.head = e;
            self.size = 1;
            acc = e.account;
            return;
        } else {
            Element memory e = self.head;
            while (true) {
                if (e.account.addr == addr) {
                    acc = e.account;
                    return;
                }
                if (e._next == 0) {
                    break;
                }
                uint n = e._next;
                assembly {
                    e := n
                }
            }
            Element memory newElem;
            newElem.account.addr = addr;
            uint elemAddr;
            assembly {
                elemAddr := newElem
            }
            e._next = elemAddr;
            acc = newElem.account;
            self.size++;
        }
    }

    function copy(Accounts memory self) internal pure returns (Accounts memory accs) {
        if (self.size == 0) {
            return;
        }
        accs.size = self.size;
        Element memory e = self.head;
        accs.head = Element(0, Account(
                e.account.addr,
                e.account.balance,
                e.account.nonce,
                e.account.destroyed,
                e.account.code,
                e.account.stge.copy()
            ));
        Element memory e2 = accs.head;
        while (true) {
            if (e._next == 0) {
                break;
            }
            uint n = e._next;
            assembly {
                e := n
            }
            Element memory newElem = Element(0, Account(
                    e.account.addr,
                    e.account.balance,
                    e.account.nonce,
                    e.account.destroyed,
                    e.account.code,
                    e.account.stge.copy()
                ));
            uint newElemAddr;
            assembly {
                newElemAddr := newElem
            }
            e2._next = newElemAddr;
            e2 = newElem;
        }
        return;
    }

    function toArray(Accounts memory self) internal pure returns (uint[] memory arr, bytes memory code) {
        if (self.size == 0) {
            return;
        }
        Account[] memory accs = new Account[](self.size);
        uint totalSize;
        Element memory e = self.head;
        uint i = 0;
        uint codeSize = 0;
        while (true) {
            uint stgSize = e.account.stge.size;
            accs[i++] = e.account;
            totalSize += 7 + stgSize * 2;
            codeSize += e.account.code.length;
            if (e._next == 0) {
                break;
            }
            uint n = e._next;
            assembly {
                e := n
            }
        }
        arr = new uint[](totalSize);
        code = new bytes(codeSize);
        uint offset = 0;
        uint codeOffset = 0;
        for (i = 0; i < self.size; i++) {
            Account memory acc = accs[i];
            arr[offset] = uint(acc.addr);
            arr[offset + 1] = acc.balance;
            arr[offset + 2] = acc.nonce;
            arr[offset + 3] = acc.destroyed ? 1 : 0;
            arr[offset + 4] = codeOffset;
            arr[offset + 5] = acc.code.length;
            arr[offset + 6] = acc.stge.size;
            EVMStorage.StorageSlot[] memory stge = EVMStorage.toArray(acc.stge);
            for (uint j = 0; j < stge.length; j++) {
                arr[offset + 7 + 2*j] = stge[j].addr;
                arr[offset + 7 + 2*j + 1] = stge[j].val;
            }
            EVMUtils.copy(acc.code, code, 0, codeOffset, acc.code.length);
            offset += 7 + stge.length * 2;
            codeOffset += acc.code.length;
        }
    }

}