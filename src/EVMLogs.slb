pragma solidity ^0.5.0;

import {EVMUtils} from "./EVMUtils.slb";

library EVMLogs {

    struct LogEntryRet {
        address account;
        uint[4] topics;
    }

    struct LogEntry {
        address account;
        uint[4] topics;
        bytes data;
    }

    struct Element {
        uint _prev;
        LogEntry entry;
    }

    struct Logs {
        Element tail;
        uint size;
    }

    function add(Logs memory self, LogEntry memory entry) internal pure {

        if (self.size == 0) {
            self.tail = Element(0, entry);
            self.size = 1;
        } else {
            Element memory tail = self.tail;
            uint tailAddr;
            assembly {
                tailAddr := tail
            }
            Element memory newElem = Element(tailAddr, entry);
            self.tail = newElem;
            self.size++;
        }
    }

    function copy(Logs memory self) internal pure returns (Logs memory newLogs) {
        if (self.size == 0) {
            return newLogs;
        }
        newLogs.size = self.size;
        Element memory e = self.tail;
        newLogs.tail = Element(0, LogEntry(e.entry.account, e.entry.topics, e.entry.data));
        Element memory e2 = newLogs.tail;
        while (true) {
            if (e._prev == 0) {
                break;
            }
            uint n = e._prev;
            assembly {
                e := n
            }
            Element memory newElem = Element(0, LogEntry(e.entry.account, e.entry.topics, e.entry.data));
            uint newElemAddr;
            assembly {
                newElemAddr := newElem
            }
            e2._prev = newElemAddr;
            e2 = newElem;
        }
    }

    function toArray(Logs memory self) internal pure returns (uint[] memory logs, bytes memory data) {
        if (self.size == 0) {
            return (logs, data);
        }
        LogEntry[] memory entries = new LogEntry[](self.size);

        Element memory e = self.tail;
        uint dataSize = 0;
        uint i = self.size;
        while (true) {
            entries[--i] = e.entry;
            dataSize += e.entry.data.length;
            if (e._prev == 0) {
                break;
            }
            uint n = e._prev;
            assembly {
                e := n
            }
        }

        logs = new uint[](7*self.size);
        data = new bytes(dataSize);
        uint dataIdx = 0;

        for (i = 0; i < self.size; i++) {
            LogEntry memory entry = entries[i];
            uint dSize = entry.data.length;

            logs[7*i] = uint(entry.account);
            logs[7*i + 1] = entry.topics[0];
            logs[7*i + 2] = entry.topics[1];
            logs[7*i + 3] = entry.topics[2];
            logs[7*i + 4] = entry.topics[3];
            logs[7*i + 5] = dataIdx;
            logs[7*i + 6] = dSize;

            EVMUtils.copy(entry.data, data, 0, dataIdx, dSize);

            dataIdx += dSize;
        }
    }

}